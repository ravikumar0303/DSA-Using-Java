Linear Doubly linked list (DLL) :

--- DLL is an ordered collection of data elements which are stored at random
    memory locations and linked with one another, every element contains the
    address or reference of the next element (successor element) as well as the
    address or reference of the previous element (predecessor element).
--- In other words, every node is divided into 3 section - information (data),
    address of next node (next pointer) and address of previous node
    (prev pointer).
--- As last node does not have any successor node, so it must contain null as
    the address or reference of next node.  Also first node does not have
    precedecssor node, so it must contain null as the address or reference of
    prev node.
--- To maintain the DLL, there are 3 options -
    a) we can maintain address of head node only.
    b) we can maintain address of tail node only.
    c) we can maintain address of head as well as tail node (efficient but code
       is little complex).

Advantages of DLL over SLL :
a) Using DLL we can move in forward as well as backward direction easily.
b) Insertion and deletion can be done efficiently (takes less time) in DLL
   compare to SLL.
c) If we know the address of any node of DLL, then we can traverse all the
   nodes.


Disadvantage of DLL :
a) Every node needs to maintain two pointers (one more than SLL), so DLL
   requires more memory space than SLL.

------------------------------------------------------------------------------------------


How to define the node of DLL in C language?
--- We use structure - user defined data type 

Suppose we want to maintain the integer values ,

typedef struct dnode
{
   struct dnode *prev,*next;
   int data;
}DLLNODE;

    OR

typedef struct dnode
{
   int data;
   struct dnode *prev,*next;   
}DLLNODE;
     

    OR

typedef struct dnode
{
   struct dnode *next;
   int data;
   struct dnode *prev;   
}DLLNODE;


In main() ----

      DLLNODE *head=NULL; 
OR    DLLNODE *tail=NULL;
OR    DLLNODE *head=NULL,*tail=NULL;

Initializing head and tail to NULL is very important to indicate that initially
DLL is empty.

---------------------------------------------------------------------------------------------

How to create a node of a SLL?

-- Node should be generated dynamically i.e. during runtime because DLL is
   dynamic in nature (can grow or shrink during runtime).
-- So we use malloc() or calloc() --- but used malloc() because we need
   to create one node at a time (single block).

DLLNODE *createnode(int value)
{
   DLLNODE *nn;
  
   nn=(DLLNODE *)malloc(sizeof(DLLNODE));  
   nn->data=value;
   nn->prev=NULL;   // important
   nn->next=NULL;   // important
   return nn;
  
}

We call this function in another function as :
 DLLNODE *newnode;
 newnode=createnode(20);

Now, we need to add or attach this newnode into the doubly linked list according
to user requirement --- at first, at last, or in between, or after some value.


----------------------------------------------------------------------------------------------

Insert at front :

a) Head address is maintained :

  DLLNODE *insert_at_front(DLLNODE *head,int value)
{
   DLLNODE *newnode=createnode(value);
   if(head==NULL)
      head=newnode;
   else
   {
     newnode->next=head;  --- 1
     head->prev=newnode;  --- 2
     head=newnode;        --- 3
   }
   return head;
}




